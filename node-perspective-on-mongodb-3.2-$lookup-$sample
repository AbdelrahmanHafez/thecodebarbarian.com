<html><head><script type="text/javascript">var _sf_startpt=(new Date()).getTime()
</script><title>A Node.js Perspective on MongoDB 3.2, Part 2: $lookup and $sample | www.thecodebarbarian.com</title><meta name="viewport" content="width=device-width, initial-scale=1"/><link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Merriweather:400,400italic,600,700" rel="stylesheet" type="text/css"/><link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet"/><link href="/style/style.css" rel="stylesheet" type="text/css"/><link href="/style/github.css" rel="stylesheet" type="text/css"/><script href="http://code.jquery.com/jquery-2.1.1.min.js" type="text/javascript"></script><script href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" type="text/javascript"></script><script href="/javascript/sidebar.js" type="text/javascript"></script><meta property="og:title" content="A Node.js Perspective on MongoDB 3.2, Part 2: $lookup and $sample"/><meta property="og:url" content="http://www.thecodebarbarian.com/node-perspective-on-mongodb-3.2-$lookup-$sample"/><meta property="og:image" content="http://i.imgur.com/Dv4ltMX.png"/><meta property="og:site_name" content="The Code Barbarian"/></head><body><div class="navbar social-links hidden-sm hidden-xs"><div class="container"><ul class="nav navbar-nav navbar-right"><li><a href="http://www.twitter.com/code_barbarian">twitter</a></li><li><a href="http://www.github.com/vkarpov15">github</a></li><li><a href="http://thecodebarbarian.com/feed.xml">rss</a></li></ul></div></div><div id="nav" class="navbar"><div class="container"><div class="navbar-header"><button type="button" data-toggle="collapse" data-target="#home-nav-mobile" class="btn btn-default navbar-toggle"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="/" class="navbar-brand big-brand"><img src="/images/Barbarian_Head.png" class="logo"/><span class="site-name">The Code Barbarian  </span></a></div><div id="home-nav-mobile" class="navbar-right collapse navbar-collapse"><ul class="nav navbar-nav"><li><a href="/tag/mongodb">MongoDB</a></li><li><a href="/tag/angularjs">AngularJS</a></li><li><a href="/tag/nodejs">NodeJS</a></li><li><a href="/tag/paleo">Paleo</a></li><li class="hidden-md hidden-lg"><a href="#">@code_barbarian</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Github</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Facebook</a></li></ul></div></div></div><div class="container-fluid"><div id="desktop-right-bar" class="col-lg-3 col-lg-offset-9 right-bar"><div class="right-bar-content-slider pull-right"><div class="row search-container"><div class="col-lg-12"><div class="form-group"></div><label>Search</label><form onsubmit="window.location.href = 'https://www.google.im/search?q=' + encodeURIComponent(document.getElementById('searchQ').value) + '+site:thecodebarbarian.com'; return false;"><div class="input-group"><input id="searchQ" type="text" class="form-control"/><div class="input-group-addon search-button"><i class="fa fa-search"></i></div></div></form></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">All Time Most Popular </p><ul class="list-unstyled"><li class="right-bar-li"><a href="/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/">Introduction to the MEAN Stack, Part One: Setting Up Your Tools</a></li><li class="right-bar-li"><a href="/2013/09/23/the-8020-guide-to-writing-angularjs-directives/">The 80/20 Guide to Writing AngularJS Directives</a></li><li class="right-bar-li"><a href="/2013/07/29/introduction-to-the-mean-stack-part-two-building-and-testing-a-to-do-list/">Introduction to the MEAN Stack, Part Two: Building and Testing a To-do List</a></li><li class="right-bar-li"><a href="/2013/05/12/how-to-easily-validate-any-form-ever-using-angularjs/">How to Easily Validate Any Form Ever Using AngularJS</a></li></ul></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">Recent Posts</p><ul class="list-unstyled"><li class="right-bar-li"><a href="/node-perspective-on-mongodb-3.2-$lookup-$sample">A Node.js Perspective on MongoDB 3.2, Part 2: $lookup and $sample</a></li><li class="right-bar-li"><a href="/node-perspective-on-mongodb-3.2-bitwise-query-operators">A Node.js Perspective on MongoDB 3.2: Bitwise Query Operators</a></li><li class="right-bar-li"><a href="/ionic-loopback-testing">Ionic Framework and LoopBack, Part IV: Testing with Travis</a></li><li class="right-bar-li"><a href="/mongodb-gridfs-stream">The MongoDB Node.js Driver's New Streaming GridFS API</a></li></ul></div></div></div></div></div><div id="mobile-sharing-options" class="container-fluid hidden-sm hidden-md hidden-lg"><div class="row"><div class="col-lg-12"><div class="post-sharing-options"><div class="row"><div class="col-xs-3 twitter-share sharing-option"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2Fnode-perspective-on-mongodb-3.2-%24lookup-%24sample&amp;via=code_barbarian" class="social"><i class="fa fa-twitter"></i></a></div><div class="col-xs-3 facebook-share sharing-option"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fnode-perspective-on-mongodb-3.2-%24lookup-%24sample" class="social"><i class="fa fa-facebook"></i></a></div><div class="col-xs-3 google-share sharing-option"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fnode-perspective-on-mongodb-3.2-%24lookup-%24sample" class="social"><i class="fa fa-google-plus"></i></a></div><div class="col-xs-3 comment sharing-option"><a href="#disqus_thread" class="social"><i class="fa fa-comment"></i></a></div></div></div></div></div></div><div id="desktop-sharing-options" class="post-sharing-options hidden-xs pull-left"><ul class="list-unstyled"><li class="twitter-share"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2Fnode-perspective-on-mongodb-3.2-%24lookup-%24sample&amp;via=code_barbarian" class="social"><i class="fa fa-twitter sharing-option"></i></a></li><li class="facebook-share"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fnode-perspective-on-mongodb-3.2-%24lookup-%24sample" class="social"><i class="fa fa-facebook sharing-option"></i></a></li><li class="google-share"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fnode-perspective-on-mongodb-3.2-%24lookup-%24sample" class="social"><i class="fa fa-google-plus sharing-option"></i></a></li></ul></div><div class="container"><div class="col-lg-9 post-text"><div class="row"><div class="title-byline-container"><h1 class="post-title">A Node.js Perspective on MongoDB 3.2, Part 2: $lookup and $sample </h1><div class="credits"><span class="byline">by Valeri Karpov</span><span class="byhandle"><a href="http://www.twitter.com/code_barbarian">@code_barbarian</a></span><span class="bydate">December 18, 2015</span></div></div></div><div class="post-body-text-container"><p>In last week&#39;s article, you
<a href="http://thecodebarbarian.com/node-perspective-on-mongodb-3.2-bitwise-query-operators">learned about bitwise query operators in MongoDB</a>
and how storing bitmaps in MongoDB can help you avoid using JOINs. In this
article, you&#39;ll learn about 2 new aggregation framework features in
MongoDB 3.2: the
<a href="https://docs.mongodb.org/v3.2/reference/operator/aggregation/lookup/#pipe._S_lookup"><code>$lookup</code></a>
and <a href="https://docs.mongodb.org/v3.2/reference/operator/aggregation/sample/#pipe._S_sample"><code>$sample</code></a>
operators.
You&#39;ve probably heard a great deal about the <code>$lookup</code> operator, but, as
you&#39;ll see in this article, <code>$sample</code> is also an important addition.</p>
<h1 id="-lookup-"><code>$lookup</code></h1>
<p>The <code>$lookup</code> operator is a way for your MongoDB aggregation pipeline to
pull in documents from another collection. Note that the <code>$lookup</code> operator
is only in the aggregation framework, you <strong>can&#39;t</strong> use <code>$lookup</code> with CRUD
operations like <code>.find()</code>, <code>.findOne()</code>, etc.</p>
<p>Let&#39;s take a look at how the <code>$lookup</code> operator works in the MongoDB shell.
Suppose you have a collection of users like you see below.</p>
<pre><code>&gt; db.users.find<span class="hljs-literal">()</span>.pretty<span class="hljs-literal">()</span>
{
    <span class="hljs-string">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-string">"56743c5af418925185babf08"</span>),
    <span class="hljs-string">"name"</span> : <span class="hljs-string">"Val"</span>,
    <span class="hljs-string">"likes"</span> : [
        <span class="hljs-string">"bacon"</span>
    ]
}
</code></pre><p>Suppose you also have a collection of related events. Note that each event
has a <code>user</code> field, which contains the ObjectId of the associated user.</p>
<pre><code>&gt; db.events.find().pretty()
{
    <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"56743c87f418925185babf09"</span>),
    <span class="hljs-string">"user"</span> : ObjectId(<span class="hljs-string">"56743c5af418925185babf08"</span>),
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"registered"</span>,
    <span class="hljs-string">"time"</span> : ISODate(<span class="hljs-string">"2015-12-18T17:04:07.487Z"</span>)
}
{
    <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"56743c8ef418925185babf0a"</span>),
    <span class="hljs-string">"user"</span> : ObjectId(<span class="hljs-string">"56743c5af418925185babf08"</span>),
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"logged in"</span>,
    <span class="hljs-string">"time"</span> : ISODate(<span class="hljs-string">"2015-12-18T17:04:14.799Z"</span>)
}
</code></pre><p>You can use the <code>$lookup</code> operator to get the user associated with each
event. The <code>$lookup</code> operator takes an object with 4 properties:</p>
<ul>
<li><code>from</code>: the collection to get documents from</li>
<li><code>localField</code>: the field in the local document</li>
<li><code>foreignField</code>: find documents in the <code>from</code> collection where this field equals the value of <code>localField</code> in the local document.</li>
<li><code>as</code>: the field in the local document to store the results in</li>
</ul>
<p>For instance, suppose you wanted to run an aggregation on the &#39;events&#39;
collection that found documents in the &#39;users&#39; collection whose <code>_id</code>
field was equal to the event&#39;s <code>user</code> field. Here&#39;s how that works
in the shell.</p>
<pre><code>&gt; db.events.aggregate([{ <span class="hljs-string">$lookup:</span> { <span class="hljs-string">from:</span> <span class="hljs-string">'users'</span>, <span class="hljs-string">localField:</span> <span class="hljs-string">'user'</span>, <span class="hljs-string">foreignField:</span> <span class="hljs-string">'_id'</span>, <span class="hljs-string">as:</span> <span class="hljs-string">'user'</span> } }]).pretty();
{
    <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"56743c87f418925185babf09"</span>),
    <span class="hljs-string">"user"</span> : [
        {
            <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"56743c5af418925185babf08"</span>),
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"Val"</span>,
            <span class="hljs-string">"likes"</span> : [
                <span class="hljs-string">"bacon"</span>
            ]
        }
    ],
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"registered"</span>,
    <span class="hljs-string">"time"</span> : ISODate(<span class="hljs-string">"2015-12-18T17:04:07.487Z"</span>)
}
{
    <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"56743c8ef418925185babf0a"</span>),
    <span class="hljs-string">"user"</span> : [
        {
            <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"56743c5af418925185babf08"</span>),
            <span class="hljs-string">"name"</span> : <span class="hljs-string">"Val"</span>,
            <span class="hljs-string">"likes"</span> : [
                <span class="hljs-string">"bacon"</span>
            ]
        }
    ],
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"logged in"</span>,
    <span class="hljs-string">"time"</span> : ISODate(<span class="hljs-string">"2015-12-18T17:04:14.799Z"</span>)
}
</code></pre><p>One case where <code>$lookup</code> is particularly useful is for data migrations.
Suppose you realized that only storing the user&#39;s id is not terribly helpful.
You can use the
<a href="https://docs.mongodb.org/v3.2/reference/operator/aggregation/out/#pipe._S_out"><code>$out</code> operator</a>
to create a new collection where each event embeds the user document.
To do this, you need a 3-stage aggregation pipeline:</p>
<ul>
<li><code>$lookup</code> the user documents</li>
<li><a href="https://docs.mongodb.org/v3.2/reference/operator/aggregation/unwind/#pipe._S_unwind"><code>$unwind</code></a> so the <code>user</code> field is not an array</li>
<li><code>$out</code> to the new collection.</li>
</ul>
<p>Below is the corresponding aggregation pipeline in the shell.</p>
<pre><code class="lang-javascript">db.events.aggregate([
  {
    <span class="hljs-variable">$lookup</span>: {
      from: <span class="hljs-string">'users'</span>,
      <span class="hljs-built_in">local</span>Field: <span class="hljs-string">'user'</span>,
      foreignField: <span class="hljs-string">'_id'</span>,
      as: <span class="hljs-string">'user'</span>
    }
  },
  { <span class="hljs-variable">$unwind</span>: <span class="hljs-string">'$user'</span> },
  { <span class="hljs-variable">$out</span>: <span class="hljs-string">'new_events'</span> }
]);
</code></pre>
<p>After you run this aggregation pipeline, the &#39;new_events&#39; collection will
contain all the events with embedded user data.</p>
<pre><code>&gt; db<span class="hljs-class">.new_events</span><span class="hljs-class">.find</span>()<span class="hljs-class">.pretty</span>()
{
    "_id" <span class="hljs-value">: <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c87f418925185babf09"</span>),
    <span class="hljs-string">"user"</span> : {
        <span class="hljs-string">"_id"</span> : <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c5af418925185babf08"</span>),
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Val"</span>,
        <span class="hljs-string">"likes"</span> : [
            <span class="hljs-string">"bacon"</span>
        ]
    },
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"registered"</span>,
    <span class="hljs-string">"time"</span> : <span class="hljs-function">ISODate</span>(<span class="hljs-string">"2015-12-18T17:04:07.487Z"</span>)
}
{
    <span class="hljs-string">"_id"</span> : <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c8ef418925185babf0a"</span>),
    <span class="hljs-string">"user"</span> : {
        <span class="hljs-string">"_id"</span> : <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c5af418925185babf08"</span>),
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Val"</span>,
        <span class="hljs-string">"likes"</span> : [
            <span class="hljs-string">"bacon"</span>
        ]
    },
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"logged in"</span>,
    <span class="hljs-string">"time"</span> : <span class="hljs-function">ISODate</span>(<span class="hljs-string">"2015-12-18T17:04:14.799Z"</span>)
}</span>
</code></pre><p>Using the <code>$lookup</code> operator in Node.js is easy. If you&#39;re going to
use the <code>$lookup</code> operator, you should use version &gt;= 2.1.0 of the
<a href="https://www.npmjs.com/package/mongodb">MongoDB driver</a> or version &gt;= 4.3.0
of <a href="https://www.npmjs.com/package/mongoose">mongoose</a>. Mongoose 4.3.x also
has a handy <code>.lookup()</code> helper as part of its
<a href="http://mongoosejs.com/docs/api.html#model_Model.aggregate">chainable aggregation pipeline builder</a>. In
mongoose, you could run the &#39;new_events&#39; migration aggregation as shown
below.</p>
<pre><code class="lang-javascript"><span class="hljs-tag">Events</span><span class="hljs-class">.aggregate</span>().
  <span class="hljs-tag">lookup</span>({
    <span class="hljs-attribute">from</span>: <span class="hljs-string">'users'</span>,
    <span class="hljs-attribute">localField</span>: <span class="hljs-string">'user'</span>,
    <span class="hljs-attribute">foreignField</span>: <span class="hljs-string">'_id'</span>,
    <span class="hljs-attribute">as</span>: <span class="hljs-string">'user'</span>
  }).
  <span class="hljs-tag">unwind</span>(<span class="hljs-string">'user'</span>).
  <span class="hljs-tag">out</span>(<span class="hljs-string">'new_events'</span>).
  <span class="hljs-tag">exec</span>();
</code></pre>
<h1 id="-sample-"><code>$sample</code></h1>
<p>While <code>$lookup</code> is extremely popular, I&#39;m more excited about the <code>$sample</code>
operator. The <code>$sample</code> operator is the answer to the age-old question of
<a href="http://stackoverflow.com/questions/2824157/random-record-from-mongodb">how to get a random document or documents from a MongoDB collection</a>.
There are numerous mechanisms for getting a single random document from
MongoDB:</p>
<ul>
<li>Setting a random skip value: <code>MyModel.find().skip(Math.random() * count);</code></li>
<li>Associating a random <code>(x, y)</code> coordinate pair with each document and execute a <a href="https://docs.mongodb.org/manual/core/2d/">query with a 2d index</a> to find the document closest to a random point.</li>
</ul>
<p>The first approach doesn&#39;t have great performance: you need to execute
a count query followed by a find with a skip. The second approach is
faster, but has poor randomness and uses a legacy feature. Neither approach
works well with getting multiple random documents.</p>
<p>The <code>$sample</code> operator makes it easy to get a random document or
documents without any additional overhead. To use <code>$sample</code>, you pass
in an object with a single property, <code>size</code>, that defines the number of
documents you want. For instance, here&#39;s how you would get a random
event from the &#39;new_events&#39; collection using the <code>$sample</code> operator in
the shell.</p>
<pre><code>&gt; db<span class="hljs-class">.new_events</span><span class="hljs-class">.aggregate</span>(<span class="hljs-attr_selector">[{ $sample: { size: 1 } }]</span>)<span class="hljs-class">.pretty</span>();
{
    "_id" <span class="hljs-value">: <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c8ef418925185babf0a"</span>),
    <span class="hljs-string">"user"</span> : {
        <span class="hljs-string">"_id"</span> : <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c5af418925185babf08"</span>),
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Val"</span>,
        <span class="hljs-string">"likes"</span> : [
            <span class="hljs-string">"bacon"</span>
        ]
    },
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"logged in"</span>,
    <span class="hljs-string">"time"</span> : <span class="hljs-function">ISODate</span>(<span class="hljs-string">"2015-12-18T17:04:14.799Z"</span>)
}
&gt; db.new_events.<span class="hljs-function">aggregate</span>([{ <span class="hljs-variable">$sample</span>: { size: <span class="hljs-number">1</span> } }]).<span class="hljs-function">pretty</span>();</span>
{
    "_id" <span class="hljs-value">: <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c87f418925185babf09"</span>),
    <span class="hljs-string">"user"</span> : {
        <span class="hljs-string">"_id"</span> : <span class="hljs-function">ObjectId</span>(<span class="hljs-string">"56743c5af418925185babf08"</span>),
        <span class="hljs-string">"name"</span> : <span class="hljs-string">"Val"</span>,
        <span class="hljs-string">"likes"</span> : [
            <span class="hljs-string">"bacon"</span>
        ]
    },
    <span class="hljs-string">"action"</span> : <span class="hljs-string">"registered"</span>,
    <span class="hljs-string">"time"</span> : <span class="hljs-function">ISODate</span>(<span class="hljs-string">"2015-12-18T17:04:07.487Z"</span>)
}</span>
</code></pre><p>If the <code>size</code> you specified is larger than the number of documents in
the collection, you get all the documents back.</p>
<p>Like <code>$lookup</code>, you should use version &gt;= 2.1.0 of the
<a href="https://www.npmjs.com/package/mongodb">MongoDB driver</a> or version &gt;= 4.3.0
of <a href="https://www.npmjs.com/package/mongoose">mongoose</a> for <code>$sample</code>.
Mongoose &gt;= 4.3.1 has a <code>.sample()</code> aggregation helper. Below is how
you&#39;d run the &#39;new_events&#39; sample aggregation pipeline in Mongoose.</p>
<pre><code class="lang-javascript"><span class="hljs-variable">NewEvents</span>.aggregate().
  sample(<span class="hljs-number">1</span>).
  exec();
</code></pre>
<h1 id="moving-on">Moving On</h1>
<p>The <code>$lookup</code> and <code>$sample</code> aggregation operators are two of MongoDB
3.2&#39;s killer features. They&#39;re easy to use in Node.js, so go ahead and
try them out!</p>
</div><div style="color: #666666; border-top: 1px dashed #666666; margin: 25px; text-align: center; padding-top: 10px"><em>Found a typo or error? Open up a pull request! This post is
available as markdown on&nbsp;<a href="https://github.com/vkarpov15/thecodebarbarian.com/blob/master/lib/posts/20151218_mongodb_32_sample.md">Github</a></em></div><div id="disqus_thread"></div><script type="text/javascript">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = 'codebarbarian'; // required: replace example with your forum shortname

/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></div></div><div style="padding-bottom: 100px">&nbsp;</div><script type="text/javascript">!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.0.1";
  analytics.load("5DErrxzVhprg8sNh8xaiKDR6dNa7yGTI");
  analytics.page()
}}();</script><script type="text/javascript">analytics.track('opened post',
  { title: "A Node.js Perspective on MongoDB 3.2, Part 2: $lookup and $sample", time: new Date() });
  </script></body></html>