<html><head><script type="text/javascript">var _sf_startpt=(new Date()).getTime()
</script><title>Ionic Framework and LoopBack, Part IV: Testing with Travis | www.thecodebarbarian.com</title><meta name="viewport" content="width=device-width, initial-scale=1"/><link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Merriweather:400,400italic,600,700" rel="stylesheet" type="text/css"/><link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet"/><link href="/style/style.css" rel="stylesheet" type="text/css"/><link href="/style/github.css" rel="stylesheet" type="text/css"/><script href="http://code.jquery.com/jquery-2.1.1.min.js" type="text/javascript"></script><script href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" type="text/javascript"></script><script href="/javascript/sidebar.js" type="text/javascript"></script><meta property="og:title" content="Ionic Framework and LoopBack, Part IV: Testing with Travis"/><meta property="og:url" content="http://www.thecodebarbarian.com/ionic-loopback-testing"/><meta property="og:image" content="http://i.imgur.com/gh86st3.png"/><meta property="og:site_name" content="The Code Barbarian"/></head><body><div class="navbar social-links hidden-sm hidden-xs"><div class="container"><ul class="nav navbar-nav navbar-right"><li><a href="http://www.twitter.com/code_barbarian">twitter</a></li><li><a href="http://www.github.com/vkarpov15">github</a></li><li><a href="http://thecodebarbarian.com/feed.xml">rss</a></li></ul></div></div><div id="nav" class="navbar"><div class="container"><div class="navbar-header"><button type="button" data-toggle="collapse" data-target="#home-nav-mobile" class="btn btn-default navbar-toggle"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="/" class="navbar-brand big-brand"><img src="/images/Barbarian_Head.png" class="logo"/><span class="site-name">The Code Barbarian  </span></a></div><div id="home-nav-mobile" class="navbar-right collapse navbar-collapse"><ul class="nav navbar-nav"><li><a href="/tag/mongodb">MongoDB</a></li><li><a href="/tag/angularjs">AngularJS</a></li><li><a href="/tag/nodejs">NodeJS</a></li><li><a href="/tag/paleo">Paleo</a></li><li class="hidden-md hidden-lg"><a href="#">@code_barbarian</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Github</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Facebook</a></li></ul></div></div></div><div class="container-fluid"><div id="desktop-right-bar" class="col-lg-3 col-lg-offset-9 right-bar"><div class="right-bar-content-slider pull-right"><div class="row search-container"><div class="col-lg-12"><div class="form-group"></div><label>Search</label><form onsubmit="window.location.href = 'https://www.google.im/search?q=' + encodeURIComponent(document.getElementById('searchQ').value) + '+site:thecodebarbarian.com'; return false;"><div class="input-group"><input id="searchQ" type="text" class="form-control"/><div class="input-group-addon search-button"><i class="fa fa-search"></i></div></div></form></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">All Time Most Popular </p><ul class="list-unstyled"><li class="right-bar-li"><a href="http://thecodebarbarian.com/2015/01/24/angularjs-interceptors">An 80/20 Guide to AngularJS HTTP Interceptors</a></li><li class="right-bar-li"><a href="http://thecodebarbarian.com/2015/01/17/angularjs-loopback">Creating REST APIs and Clients with LoopBack and AngularJS</a></li><li class="right-bar-li"><a href="http://thecodebarbarian.com/2015/02/20/better-angularjs-form-validation-with-mongoose">Better AngularJS Form Validation with Mongoose</a></li><li class="right-bar-li"><a href="http://thecodebarbarian.com/2015/02/06/static_site_generators">Static Site Generators are Overkill</a></li><li class="right-bar-li"><a href="http://thecodebarbarian.com/2015/03/06/guide-to-mongoose-plugins">An 80/20 Guide to Mongoose Plugins</a></li></ul></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">Recent Posts</p><ul class="list-unstyled"><li class="right-bar-li"><a href="/mongoose-2015-year-in-review">Mongoose 2015 Year in Review</a></li><li class="right-bar-li"><a href="/node-perspective-on-mongodb-3.2-$lookup-$sample">A Node.js Perspective on MongoDB 3.2, Part 2: $lookup and $sample</a></li><li class="right-bar-li"><a href="/node-perspective-on-mongodb-3.2-bitwise-query-operators">A Node.js Perspective on MongoDB 3.2: Bitwise Query Operators</a></li><li class="right-bar-li"><a href="/ionic-loopback-testing">Ionic Framework and LoopBack, Part IV: Testing with Travis</a></li></ul></div></div></div></div></div><div id="mobile-sharing-options" class="container-fluid hidden-sm hidden-md hidden-lg"><div class="row"><div class="col-lg-12"><div class="post-sharing-options"><div class="row"><div class="col-xs-3 twitter-share sharing-option"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2Fionic-loopback-testing&amp;via=code_barbarian" class="social"><i class="fa fa-twitter"></i></a></div><div class="col-xs-3 facebook-share sharing-option"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fionic-loopback-testing" class="social"><i class="fa fa-facebook"></i></a></div><div class="col-xs-3 google-share sharing-option"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fionic-loopback-testing" class="social"><i class="fa fa-google-plus"></i></a></div><div class="col-xs-3 comment sharing-option"><a href="#disqus_thread" class="social"><i class="fa fa-comment"></i></a></div></div></div></div></div></div><div id="desktop-sharing-options" class="post-sharing-options hidden-xs pull-left"><ul class="list-unstyled"><li class="twitter-share"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2Fionic-loopback-testing&amp;via=code_barbarian" class="social"><i class="fa fa-twitter sharing-option"></i></a></li><li class="facebook-share"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fionic-loopback-testing" class="social"><i class="fa fa-facebook sharing-option"></i></a></li><li class="google-share"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2Fionic-loopback-testing" class="social"><i class="fa fa-google-plus sharing-option"></i></a></li></ul></div><div class="container"><div class="col-lg-9 post-text"><div class="row"><div class="title-byline-container"><h1 class="post-title">Ionic Framework and LoopBack, Part IV: Testing with Travis </h1><div class="credits"><span class="byline">by Valeri Karpov</span><span class="byhandle"><a href="http://www.twitter.com/code_barbarian">@code_barbarian</a></span><span class="bydate">November 13, 2015</span></div></div></div><div class="post-body-text-container"><p><em>This post originally appeared on <a href="https://strongloop.com/strongblog/part-4-ionic-loopback-frameworks-testing-with-travis/">strongloop.com</a>. StrongLoop provides tools and services for companies developing APIs in Node. <a href="http://www.strongloop.com">Learn more...</a></em></p>
<p>In the first three articles in this series, you built a simple mobile app and
server using the Ionic Framework and StrongLoop LoopBack. In this article,
you&#39;ll learn about one key advantage of building mobile apps with Ionic:
access to the JavaScript testing ecosystem. Testing native apps is hard.
<a href="http://docs.travis-ci.com/user/languages/android/">TravisCI has beta support for Android builds</a>,
and setting up iOS testing on
Travis is
<a href="https://www.objc.io/issues/6-build-tools/travis-ci/">a nightmarish tangle of accounts and certificates</a>.
Since your Ionic app is just JavaScript, however, you can test your
AngularJS code in a browser. In this article, you&#39;ll use
<a href="https://strongloop.com/strongblog/karma-test-client-side-javascript/">karma</a>
and
<a href="https://www.npmjs.com/package/phantomjs">PhantomJS</a>
to test the directives in your mobile app.</p>
<h2 id="karma-basics">Karma Basics</h2>
<p><em>TLDR; <a href="https://github.com/vkarpov15/stopwatch-example/commit/1b9cd0ec48e18e0782804c0446c8c74651477127">See a diff for this step on GitHub</a></em></p>
<p><a href="https://www.npmjs.com/package/karma">Karma</a> is a browser automation tool
for testing. The general purpose of karma is to start a browser, run some code,
and log the output to the shell. In this section, you&#39;ll learn enough about
karma to run a basic directive test in Travis; if you&#39;re interested in learning
more, I wrote a
<a href="https://strongloop.com/strongblog/karma-test-client-side-javascript/">more detailed guide to Karma on the StrongLoop blog</a>.</p>
<p>Karma is like gulp; it&#39;s a lightweight core that&#39;s highly pluggable, but needs
a plugin to do anything non-trivial. In particular, you need plugins to enable
karma to launch specific browsers. For this article, you&#39;ll use 2 karma plugins:
one that enables karma to launch PhantomJS, and one that provides an adapter for
the <a href="https://www.npmjs.com/package/mocha">mocha testing framework</a>.</p>
<pre><code class="lang-javascript"><span class="hljs-label">devDependencies:</span> {
  <span class="hljs-string">"karma"</span>: <span class="hljs-string">"0.13.15"</span>,
  <span class="hljs-string">"karma-mocha"</span>: <span class="hljs-string">"0.2.0"</span>,
  <span class="hljs-string">"karma-phantomjs-launcher"</span>: <span class="hljs-string">"0.2.1"</span>,
  <span class="hljs-string">"mocha"</span>: <span class="hljs-string">"2.3.3"</span>,
  <span class="hljs-string">"phantomjs"</span>: <span class="hljs-string">"1.9.18"</span>
}
</code></pre>
<p>Once you&#39;ve installed karma, you&#39;ll need to do a little extra work to make your
tests easy to run. You&#39;ll need to create a
<a href="https://github.com/vkarpov15/stopwatch-example/commit/1b9cd0ec48e18e0782804c0446c8c74651477127#diff-5">separate AngularJS module that contains all the stopwatch-specific logic</a>
from the
<a href="https://strongloop.com/strongblog/part-3-ionic-loopback-frameworks-building-the-ionic-app/">third article in this series</a>. Why? Getting the whole Ionic bundle to run in a browser
is unnecessary in this case, because the stopwatch directives don&#39;t touch any
Ionic-specific code. All you really need to test is how the directives work
in conjunction with the HTTP interceptors and other Ionic-specific
configuration.</p>
<p>Once you&#39;ve created this <code>stopwatch.js</code> file that contains an AngularJS module
with all of your stopwatch-specific directives, it&#39;s time to set up a karma
config file. Karma config files can be intimidating at first, but they make
sense once you remember the 3 things that karma is responsible for: starting
browsers, running some JavaScript, and reporting output.</p>
<pre><code class="lang-javascript"><span class="xml">module.exports = function(config) </span><span class="hljs-expression">{
  <span class="hljs-variable">config.set</span>({
    /<span class="hljs-end-block">/ Start these browsers</span>
    <span class="hljs-variable">browsers</span>: ['<span class="hljs-variable">PhantomJS</span>'],
    /<span class="hljs-end-block">/ Load these files</span>
    <span class="hljs-variable">basePath</span>: '<span class="hljs-variable">..</span>/',
    <span class="hljs-variable">files</span>: [
      '<span class="hljs-variable">http</span>:/<span class="hljs-end-block">/code.jquery.com</span><span class="hljs-end-block">/jquery-</span>1<span class="hljs-variable">.</span>9<span class="hljs-variable">.</span>1<span class="hljs-variable">.js</span>',
      '<span class="hljs-variable">https</span>:/<span class="hljs-end-block">/cdnjs.cloudflare.com</span><span class="hljs-end-block">/ajax</span><span class="hljs-end-block">/libs</span><span class="hljs-end-block">/chai</span>/3<span class="hljs-variable">.</span>4<span class="hljs-variable">.</span>0<span class="hljs-end-block">/chai.js</span>',
      '<span class="hljs-variable">https</span>:/<span class="hljs-end-block">/ajax.googleapis.com</span><span class="hljs-end-block">/ajax</span><span class="hljs-end-block">/libs</span><span class="hljs-end-block">/angularjs</span>/1<span class="hljs-variable">.</span>4<span class="hljs-variable">.</span>7<span class="hljs-end-block">/angular.js</span>',
      '<span class="hljs-variable">https</span>:/<span class="hljs-end-block">/ajax.googleapis.com</span><span class="hljs-end-block">/ajax</span><span class="hljs-end-block">/libs</span><span class="hljs-end-block">/angularjs</span>/1<span class="hljs-variable">.</span>4<span class="hljs-variable">.</span>7<span class="hljs-end-block">/angular-resource.js</span>',
      '<span class="hljs-variable">https</span>:/<span class="hljs-end-block">/ajax.googleapis.com</span><span class="hljs-end-block">/ajax</span><span class="hljs-end-block">/libs</span><span class="hljs-end-block">/angularjs</span>/1<span class="hljs-variable">.</span>4<span class="hljs-variable">.</span>7<span class="hljs-end-block">/angular-mocks.js</span>',
      '<span class="hljs-variable">https</span>:/<span class="hljs-end-block">/cdnjs.cloudflare.com</span><span class="hljs-end-block">/ajax</span><span class="hljs-end-block">/libs</span><span class="hljs-end-block">/moment.js</span>/2<span class="hljs-variable">.</span>10<span class="hljs-variable">.</span>6<span class="hljs-end-block">/moment.js</span>',
      '<span class="hljs-variable">www</span><span class="hljs-end-block">/js</span><span class="hljs-end-block">/stopwatch.js</span>',
      '<span class="hljs-variable">www</span><span class="hljs-end-block">/js</span><span class="hljs-end-block">/directives</span><span class="hljs-end-block">/index.js</span>',
      '<span class="hljs-variable">www</span><span class="hljs-end-block">/js</span><span class="hljs-end-block">/templates</span><span class="hljs-end-block">/index.js</span>',
      /<span class="hljs-end-block">/ These are all your test files</span>
      '<span class="hljs-variable">test</span>/*<span class="hljs-variable">.test.js</span>'
    ],
    <span class="hljs-variable">frameworks</span>: ['<span class="hljs-variable">mocha</span>'],
    /<span class="hljs-end-block">/ And a couple other details</span>
    <span class="hljs-variable">port</span>: 9876,
    <span class="hljs-variable">singleRun</span>: <span class="hljs-variable">true</span>
  }</span><span class="xml">);
};</span>
</code></pre>
<p>The above config assumes that all the tests will be in the <code>test/</code> directory.
Let&#39;s write a basic mocha test and run it.</p>
<pre><code class="lang-javascript">describe(<span class="hljs-string">'test'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> {
  it(<span class="hljs-string">'works'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> {
    <span class="hljs-built_in">assert</span>.equal(<span class="hljs-string">'A'</span>, <span class="hljs-string">'A'</span>);
  });
});
</code></pre>
<p>In order to make karma easier to run, you can create a script in your
<code>package.json</code>:</p>
<pre><code class="lang-javascript"><span class="hljs-string">"scripts"</span>: {
  <span class="hljs-string">"test"</span>: <span class="hljs-string">"karma start test/karma.phantom.conf.js"</span>
}
</code></pre>
<p>Now, once you run <code>npm test</code>, you should see output that looks like this:</p>
<pre><code><span class="hljs-variable">$ </span>npm test

&gt; stopwatch-example<span class="hljs-variable">@1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> test
&gt; karma start test/karma.phantom.conf.js

<span class="hljs-number">05</span> <span class="hljs-number">11</span> <span class="hljs-number">2015</span> <span class="hljs-number">18</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span><span class="hljs-symbol">:</span><span class="hljs-number">30.691</span><span class="hljs-symbol">:INFO</span> [karma]<span class="hljs-symbol">:</span> <span class="hljs-constant">Karma </span>v<span class="hljs-number">0</span>.<span class="hljs-number">13.15</span> server started at <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/localhost:9876/</span>
<span class="hljs-number">05</span> <span class="hljs-number">11</span> <span class="hljs-number">2015</span> <span class="hljs-number">18</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span><span class="hljs-symbol">:</span><span class="hljs-number">30.699</span><span class="hljs-symbol">:INFO</span> [launcher]<span class="hljs-symbol">:</span> <span class="hljs-constant">Starting </span>browser <span class="hljs-constant">PhantomJS</span>
<span class="hljs-number">05</span> <span class="hljs-number">11</span> <span class="hljs-number">2015</span> <span class="hljs-number">18</span><span class="hljs-symbol">:</span><span class="hljs-number">43</span><span class="hljs-symbol">:</span><span class="hljs-number">31.357</span><span class="hljs-symbol">:INFO</span> [<span class="hljs-constant">PhantomJS </span><span class="hljs-number">1.9</span>.<span class="hljs-number">8</span> (<span class="hljs-constant">Linux </span><span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>)]<span class="hljs-symbol">:</span> <span class="hljs-constant">Executed </span><span class="hljs-number">1</span> of <span class="hljs-number">1</span> <span class="hljs-constant">SUCCESS </span>(<span class="hljs-number">0</span>.<span class="hljs-number">03</span>8 secs / <span class="hljs-number">0</span> secs)
</code></pre><h2 id="testing-angularjs-directives">Testing AngularJS Directives</h2>
<p><em>TLDR; <a href="https://github.com/vkarpov15/stopwatch-example/commit/e6c278b3d5a9cf612e112bea38fc1f4874fcac9b">See a diff for this step on GitHub</a></em></p>
<p>No offense to Aristotle, but a test that asserts that
<a href="http://www.importanceofphilosophy.com/Metaphysics_Identity.html">A is A</a>
is not particularly interesting. Part of what makes AngularJS so powerful
is the ability to test directives from the level of user interactions without
a server. In other words, you can test your directives using jQuery&#39;s <code>.click()</code>
and <code>.val()</code> methods without having to set up a server.</p>
<p>How does this work? The key is
<a href="https://docs.angularjs.org/api/ng/service/$compile">AngularJS&#39; <code>$compile</code> service</a>.
If you don&#39;t understand the <code>$compile</code> docs, don&#39;t worry, I don&#39;t either.
At a high level, the <code>$compile</code> service takes in an HTML string and an AngularJS
scope, and compiles the HTML into a DOM element attached to the given scope.
In other words, the  <code>$compile</code> service lets you instantiate your directives.</p>
<pre><code class="lang-javascript"><span class="hljs-keyword">var</span> injector = angular.injector([<span class="hljs-string">'stopwatch'</span>, <span class="hljs-string">'ngMockE2E'</span>]);

injector.invoke(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-variable">$rootScope</span>, <span class="hljs-variable">$compile</span>)</span> </span>{
  parentScope = <span class="hljs-variable">$rootScope</span>.<span class="hljs-variable">$new</span>();

  <span class="hljs-keyword">var</span> html = <span class="hljs-string">'&lt;timer on-time-saved="onSaved(time);"&gt;&lt;/timer&gt;'</span>;
  element = <span class="hljs-variable">$compile</span>(html)(parentScope);
  <span class="hljs-comment">// Can now do things like `element.css('display')` and</span>
  <span class="hljs-comment">// `element.find('button').click();`</span>
});
</code></pre>
<p><a href="https://docs.angularjs.org/api/auto/service/$injector">The <code>angular.injector()</code> function</a>
is what you use to generate your <code>$compile</code> service. This creates a new
AngularJS dependency injector from the given modules. Since the injector knows
about the stopwatch module, the <code>$compile</code> service will know about the <code>timer</code>
directive and give you a jQuery handle to an instantiated <code>timer</code> directive.</p>
<p>In order to really run this test, you&#39;re going to need three more details.
First, you&#39;re going to need to define the <code>onSaved()</code> function. This is just
going to be a stub for testing.</p>
<pre><code class="lang-javascript">parentScope.onSaved = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(time)</span> </span>{
  parentScope.onSaved.calls.push(time);
};
parentScope.onSaved.calls = [];
</code></pre>
<p>Secondly, recall that the <code>timer</code> directive creates a new AngularJS scope.
The <code>parentScope</code> variable is useful, but what if we want access to the
directive&#39;s internals? Thankfully, a scope has a <code>$$childHead</code> member that
points to its first child scope.</p>
<pre><code class="lang-javascript"><span class="hljs-title">scope</span> = parentScope.$<span class="hljs-variable">$childHead</span>;
</code></pre>
<p>Finally, you&#39;re going to want to test that clicking on the &#39;Save&#39; button
triggers the correct HTTP request. Thankfully, that&#39;s what AngularJS&#39;
<code>$httpBackend</code> service (part of the <code>ngMockE2E</code> module you saw above) is for.</p>
<pre><code class="lang-javascript">injector.invoke(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-variable">$rootScope</span>, <span class="hljs-variable">$compile</span>, <span class="hljs-variable">$httpBackend</span>)</span> </span>{
  parentScope = <span class="hljs-variable">$rootScope</span>.<span class="hljs-variable">$new</span>();
  httpBackend = <span class="hljs-variable">$httpBackend</span>;
});
</code></pre>
<p>With that, you&#39;re ready to write your first test. The full code can be
found on
<a href="https://github.com/vkarpov15/stopwatch-example/commit/e6c278b3d5a9cf612e112bea38fc1f4874fcac9b#diff-0">GitHub</a>.
Let&#39;s walk through the high-level concepts in this test. Now that you have the
element, you first want to click on the &#39;Start&#39; button in the <code>timer</code> directive
and make sure the directive reacted correctly.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// Click the 'Start' button</span>
element.<span class="hljs-built_in">find</span>('button[ng-click=<span class="hljs-string">"startTimer()"</span>]').click();
<span class="hljs-comment">// Make sure the internal state updated</span>
<span class="hljs-built_in">assert</span>.<span class="hljs-built_in">equal</span>(scope.state, '<span class="hljs-type">RUNNING'</span>);
<span class="hljs-built_in">assert</span>.<span class="hljs-built_in">equal</span>(scope.ms, <span class="hljs-number">0</span>);
<span class="hljs-comment">// And make sure the 'Start' button no longer appears</span>
<span class="hljs-built_in">assert</span>.ok(element.<span class="hljs-built_in">find</span>('button[ng-click=<span class="hljs-string">"startTimer()"</span>]').
  hasClass('ng-hide'));
</code></pre>
<p>Now, you want to wait a while and make sure the timer updates every second
correctly.</p>
<pre><code class="lang-javascript">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span> {
  <span class="hljs-built_in">assert</span>.equal(scope.ms, <span class="hljs-number">1000</span>);
}, <span class="hljs-number">1100</span>);
</code></pre>
<p>Once the timer has updated to 1 second, your test is going to click the stop
button and assert that the directive reacted correctly.</p>
<pre><code class="lang-javascript"><span class="hljs-comment">// Click on the 'Stop' button</span>
element.find(<span class="hljs-string">'button[ng-click="stopTimer()"]'</span>).click();
<span class="hljs-comment">// Make sure the internal state updated correctly</span>
<span class="hljs-keyword">assert</span>.equal(scope.state, <span class="hljs-string">'STOPPED'</span>);

<span class="hljs-comment">// Tell AngularJS to expect an HTTP POST request whose body satisfies</span>
<span class="hljs-comment">// this function</span>
var validateData = function(data) {
  <span class="hljs-keyword">assert</span>.deepEqual(JSON.parse(data), { <span class="hljs-string">time:</span> <span class="hljs-number">1000</span> });
  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
};
httpBackend.expectPOST(<span class="hljs-string">'http://localhost:3000/api/Times'</span>, validateData).
  respond(<span class="hljs-number">200</span>, { <span class="hljs-string">result:</span> <span class="hljs-string">'success'</span> });

<span class="hljs-comment">// Click on the 'Save' button and trigger the request</span>
element.find(<span class="hljs-string">'button[ng-click="save()"]'</span>).click();

<span class="hljs-comment">// Tell AngularJS to respond to the HTTP POST request</span>
httpBackend.flush();

<span class="hljs-comment">// Make sure the internal state updated correctly</span>
<span class="hljs-keyword">assert</span>.equal(scope.state, <span class="hljs-string">'SUCCESS'</span>);
</code></pre>
<p>If you&#39;re interested in learning more, there&#39;s a
<a href="http://thecodebarbarian.com/2015/06/12/testing-angularjs-directives">detailed guide to testing AngularJS directives on my blog</a>.</p>
<h2 id="setting-up-travis">Setting Up Travis</h2>
<p><em>TLDR; <a href="https://github.com/vkarpov15/stopwatch-example/commit/592d7cb64ff23a3dae465db3d6f95c49e095b76a">See a diff for this step on GitHub</a></em></p>
<p>Once you have tests for your mobile app, you can set up
<a href="https://travis-ci.org/">Travis</a> to run your tests on every commit to GitHub.
The tests are the hard part, setting up Travis to work with Node is
much easier than Android or iOS. All you need to do is set up an account
on Travis, add your Ionic app&#39;s GitHub repo, and add the below <code>.travis.yml</code>
file to your repo.</p>
<pre><code><span class="hljs-label">language:</span> node_js
<span class="hljs-label">node_js:</span>
  - <span class="hljs-string">"4"</span>
<span class="hljs-label">script:</span> <span class="hljs-string">"npm test"</span>
</code></pre><p>Easy, right? If you need extra help setting up Travis, there&#39;s a
<a href="https://strongloop.com/strongblog/npm-modules-travis-coveralls/">detailed guide to setting up Travis for Node.js on the StrongLoop blog</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>That&#39;s a wrap! You&#39;ve now built a LoopBack REST API, a desktop web client, and
an Ionic Framework mobile app. You even put together a CI setup for your mobile
app. LoopBack and it&#39;s corresponding AngularJS SDK enabled you to generate
a REST API and it&#39;s corresponding UI components with a few commands and minimal
coding. The Ionic Framework let you leverage these browser-based UI components
to build an easily-testable mobile app. Looks like JavaScript isn&#39;t just
for the browser (or the server) anymore.</p>
</div><div style="color: #666666; border-top: 1px dashed #666666; margin: 25px; text-align: center; padding-top: 10px"><em>Found a typo or error? Open up a pull request! This post is
available as markdown on&nbsp;<a href="https://github.com/vkarpov15/thecodebarbarian.com/blob/master/lib/posts/20151113_loopback_ionic_iv.md">Github</a></em></div><div id="disqus_thread"></div><script type="text/javascript">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = 'codebarbarian'; // required: replace example with your forum shortname

/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></div></div><div style="padding-bottom: 100px">&nbsp;</div><script type="text/javascript">!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.0.1";
  analytics.load("5DErrxzVhprg8sNh8xaiKDR6dNa7yGTI");
  analytics.page()
}}();</script><script type="text/javascript">analytics.track('opened post',
  { title: "Ionic Framework and LoopBack, Part IV: Testing with Travis", time: new Date() });
  </script></body></html>