<html><head><script type="text/javascript">var _sf_startpt=(new Date()).getTime()
</script><title>The 80/20 Guide to Writing and Using AngularJS Filters | www.thecodebarbarian.com</title><meta name="viewport" content="width=device-width, initial-scale=1"/><link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Merriweather:400,400italic,600,700" rel="stylesheet" type="text/css"/><link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet"/><link href="/style/style.css" rel="stylesheet" type="text/css"/><link href="/style/github.css" rel="stylesheet" type="text/css"/><script href="http://code.jquery.com/jquery-2.1.1.min.js" type="text/javascript"></script><script href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" type="text/javascript"></script><script href="/javascript/sidebar.js" type="text/javascript"></script><meta property="og:title" content="The 80/20 Guide to Writing and Using AngularJS Filters"/><meta property="og:url" content="http://www.thecodebarbarian.com/2014/01/17/the-8020-guide-to-writing-and-using-angularjs-filters"/><meta property="og:image" content="//thecodebarbarian.files.wordpress.com/2014/01/hanashuriken2.png"/><meta property="og:site_name" content="The Code Barbarian"/></head><body><div class="navbar social-links hidden-sm hidden-xs"><div class="container"><ul class="nav navbar-nav navbar-right"><li><a href="http://www.twitter.com/code_barbarian">twitter</a></li><li><a href="http://www.github.com/vkarpov15">github</a></li><li><a href="http://thecodebarbarian.com/feed">rss</a></li></ul></div></div><div id="nav" class="navbar"><div class="container"><div class="navbar-header"><button type="button" data-toggle="collapse" data-target="#home-nav-mobile" class="btn btn-default navbar-toggle"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="/" class="navbar-brand big-brand"><img src="/images/Barbarian_Head.png" class="logo"/><span class="site-name">The Code Barbarian  </span></a></div><div id="home-nav-mobile" class="navbar-right collapse navbar-collapse"><ul class="nav navbar-nav"><li><a href="/tag/mongodb">MongoDB</a></li><li><a href="/tag/angularjs">AngularJS</a></li><li><a href="/tag/nodejs">NodeJS</a></li><li><a href="/tag/paleo">Paleo</a></li><li class="hidden-md hidden-lg"><a href="#">@code_barbarian</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Github</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Facebook</a></li></ul></div></div></div><div class="container-fluid"><div id="desktop-right-bar" class="col-lg-3 col-lg-offset-9 right-bar"><div class="right-bar-content-slider pull-right"><div class="row search-container"><div class="col-lg-12"><div class="form-group"></div><label>Search</label><form onsubmit="window.location.href = 'https://www.google.im/search?q=' + encodeURIComponent(document.getElementById('searchQ').value) + '+site:thecodebarbarian.com'; return false;"><div class="input-group"><input id="searchQ" type="text" class="form-control"/><div class="input-group-addon search-button"><i class="fa fa-search"></i></div></div></form></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">All Time Most Popular </p><ul class="list-unstyled"><li class="right-bar-li"><a href="/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/">Introduction to the MEAN Stack, Part One: Setting Up Your Tools</a></li><li class="right-bar-li"><a href="/2013/09/23/the-8020-guide-to-writing-angularjs-directives/">The 80/20 Guide to Writing AngularJS Directives</a></li><li class="right-bar-li"><a href="/2013/07/29/introduction-to-the-mean-stack-part-two-building-and-testing-a-to-do-list/">Introduction to the MEAN Stack, Part Two: Building and Testing a To-do List</a></li><li class="right-bar-li"><a href="/2013/05/12/how-to-easily-validate-any-form-ever-using-angularjs/">How to Easily Validate Any Form Ever Using AngularJS</a></li></ul></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">Recent Posts</p><ul class="list-unstyled"><li class="right-bar-li"><a href="/ionic-loopback-testing">Ionic Framework and LoopBack, Part IV: Testing with Travis</a></li><li class="right-bar-li"><a href="/mongodb-gridfs-stream">The MongoDB Node.js Driver's New Streaming GridFS API</a></li><li class="right-bar-li"><a href="/2015/10/09/ionic-loopback-mobile-app">Ionic Framework and LoopBack, Part III: Building an Ionic App</a></li><li class="right-bar-li"><a href="/2015/09/04/ionic-loopback-directives">Ionic Framework and LoopBack, Part II: Directives with the AngularJS LoopBack SDK</a></li></ul></div></div></div></div></div><div id="mobile-sharing-options" class="container-fluid hidden-sm hidden-md hidden-lg"><div class="row"><div class="col-lg-12"><div class="post-sharing-options"><div class="row"><div class="col-xs-3 twitter-share sharing-option"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F2014%2F01%2F17%2Fthe-8020-guide-to-writing-and-using-angularjs-filters&amp;via=code_barbarian" class="social"><i class="fa fa-twitter"></i></a></div><div class="col-xs-3 facebook-share sharing-option"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F01%2F17%2Fthe-8020-guide-to-writing-and-using-angularjs-filters" class="social"><i class="fa fa-facebook"></i></a></div><div class="col-xs-3 google-share sharing-option"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F01%2F17%2Fthe-8020-guide-to-writing-and-using-angularjs-filters" class="social"><i class="fa fa-google-plus"></i></a></div><div class="col-xs-3 comment sharing-option"><a href="#disqus_thread" class="social"><i class="fa fa-comment"></i></a></div></div></div></div></div></div><div id="desktop-sharing-options" class="post-sharing-options hidden-xs pull-left"><ul class="list-unstyled"><li class="twitter-share"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F2014%2F01%2F17%2Fthe-8020-guide-to-writing-and-using-angularjs-filters&amp;via=code_barbarian" class="social"><i class="fa fa-twitter sharing-option"></i></a></li><li class="facebook-share"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F01%2F17%2Fthe-8020-guide-to-writing-and-using-angularjs-filters" class="social"><i class="fa fa-facebook sharing-option"></i></a></li><li class="google-share"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F01%2F17%2Fthe-8020-guide-to-writing-and-using-angularjs-filters" class="social"><i class="fa fa-google-plus sharing-option"></i></a></li></ul></div><div class="container"><div class="col-lg-9 post-text"><div class="row"><div class="title-byline-container"><h1 class="post-title">The 80/20 Guide to Writing and Using AngularJS Filters </h1><div class="credits"><span class="byline">by Valeri Karpov</span><span class="byhandle"><a href="http://www.twitter.com/code_barbarian">@code_barbarian</a></span><span class="bydate">January 17, 2014</span></div></div></div><div class="post-body-text-container"><p>My <a href="http://thecodebarbarian.com/2013/09/23/the-8020-guide-to-writing-angularjs-directives/">directives post</a> seems to have gone over well. I&#39;ve received emails and comments from readers expressing how much it helped them, so I figured I&#39;d write a post about one of the simultaneously oldest, most useful, and most under appreciated AngularJS features.</p>
<p>What is a filter? A filter is a function that is accessible from within any AngularJS expression in your <a href="http://docs.angularjs.org/api/ng.directive:ngApp">app</a>. Filters are primarily useful for any last-second post-processing your data needs before being displayed to the user. The general high-level structure of an AngularJS application looks like this: controllers handle making the data accessible from a given scope, directives handle the visual rules for displaying and interacting with the data, and filters help directives format the data.</p>
<p>If this sounds a little vague, don&#39;t worry, we&#39;ll walk through a few examples of common use cases for filters. Filters are much simpler to grasp than directives, but they also have more pitfalls. Each example will also demonstrate a pitfall that you may run into with each design pattern, so hopefully you&#39;ll be able to derive all the benefit from filters without any of the headache.</p>
<h2 id="1-specifying-rules-for-converting-an-object-to-a-string">1) Specifying rules for converting an object to a string</h2>
<p><em>AngularJS example: The <a href="http://docs.angularjs.org/api/ng.filter:date">date filter</a></em></p>
<p><em>Our example: A pluralize filter, which will allow us to easily encode rules for displaying counts of things, e.g. 1 hour, 2 hours, etc.</em></p>
<p><em>Alternative example: Convert hashtags to Github issue URLs.</em></p>
<p>When building out a UI, you will inevitably run into a place where your UI / UX / design guy decides that the way that data is stored isn&#39;t quite conducive to how it should be displayed. Perhaps you have separate fields for first name and last name, but your designer&#39;s copy/pasting something like this all over the place:</p>
<pre><code>{{user.<span class="hljs-property">name</span>.<span class="hljs-keyword">first</span>}} {{user.<span class="hljs-property">name</span>.<span class="hljs-keyword">last</span>}}
</code></pre><p>Naturally, as developers, we want to avoid copy/paste as much as possible - what happens when a decision is made to only display the first initial of the last name? Or when a decision is made to only store the first name? Either of these decisions will become a nightmare scenario that could lead to the worst of all programming sins: editing your code using <code>sed</code>. Another simple alternative would be to wrap the rule for how a name should be displayed in a function, but where would the function live? I know you weren&#39;t thinking of attaching a <code>formatName()</code> function to <code>Object.prototype</code>. A naive approach would put this function in every single controller that needs it. However, then you have to remember to put this function in every single controller. A much better solution would be to simply use a filter:</p>
<pre><code>app.<span class="hljs-built_in">filter</span>(<span class="hljs-string">'displayName'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> {</span>
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(name)</span> {</span>
    <span class="hljs-keyword">return</span> name.<span class="hljs-keyword">first</span> + <span class="hljs-string">" "</span> + name.<span class="hljs-keyword">last</span>;
  }
});
</code></pre><p>Now your designer can display the username as</p>
<pre><code><span class="xml"></span><span class="hljs-expression">{{<span class="hljs-variable">user.name</span> | <span class="hljs-variable">displayName</span>}}</span><span class="xml"></span>
</code></pre><p>In addition, your designer can use this functionality to chain filters together to perform simple tasks, like limiting the length of the displayed string to 40 characters, without disrupting two-way data-binding:</p>
<pre><code><span class="xml"></span><span class="hljs-expression">{{<span class="hljs-variable">user.name</span> | <span class="hljs-variable">displayName</span> | <span class="hljs-variable">limitTo</span>:40}}</span><span class="xml"></span>
</code></pre><p>Lets build a slightly more useful example. Displaying units for a number is very helpful, but displaying text like &quot;today I have performed 1 bench press rep(s)&quot; in your app seems unprofessional. Lets write a filter that will take care of our pluralization needs, appropriately called &#39;pluralize&#39;. Check it out on <a href="http://jsfiddle.net/vkarpov15/mC7pd/">JSFiddle</a>.</p>
<pre><code>angular.
  module(<span class="hljs-string">'myApp'</span>, []).
  filter(<span class="hljs-string">'pluralize'</span>, function() {
    <span class="hljs-keyword">return</span> function(ordinal, noun) {
      <span class="hljs-keyword">if</span> (ordinal == <span class="hljs-number">1</span>) {
        <span class="hljs-keyword">return</span> ordinal + <span class="hljs-string">' '</span> + noun;
      } <span class="hljs-keyword">else</span> {
        var plural = noun;
        <span class="hljs-keyword">if</span> (noun.<span class="hljs-keyword">substr</span>(noun.<span class="hljs-keyword">length</span> - <span class="hljs-number">2</span>) == <span class="hljs-string">'us'</span>) {
          plural = plural.<span class="hljs-keyword">substr</span>(<span class="hljs-number">0</span>, plural.<span class="hljs-keyword">length</span> - <span class="hljs-number">2</span>) + <span class="hljs-string">'i'</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (noun.<span class="hljs-keyword">substr</span>(noun.<span class="hljs-keyword">length</span> - <span class="hljs-number">2</span>) == <span class="hljs-string">'ch'</span> || noun.charAt(noun.<span class="hljs-keyword">length</span> - <span class="hljs-number">1</span>) == <span class="hljs-string">'x'</span> || noun.charAt(noun.<span class="hljs-keyword">length</span> - <span class="hljs-number">1</span>) == <span class="hljs-string">'s'</span>) {
          plural += <span class="hljs-string">'es'</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (noun.charAt(noun.<span class="hljs-keyword">length</span> - <span class="hljs-number">1</span>) == <span class="hljs-string">'y'</span> &amp;&amp; [<span class="hljs-string">'a'</span>,<span class="hljs-string">'e'</span>,<span class="hljs-string">'i'</span>,<span class="hljs-string">'o'</span>,<span class="hljs-string">'u'</span>].indexOf(noun.charAt(noun.<span class="hljs-keyword">length</span> - <span class="hljs-number">2</span>)) == -<span class="hljs-number">1</span>) {
          plural = plural.<span class="hljs-keyword">substr</span>(<span class="hljs-number">0</span>, plural.<span class="hljs-keyword">length</span> - <span class="hljs-number">1</span>) + <span class="hljs-string">'ies'</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (noun.<span class="hljs-keyword">substr</span>(noun.<span class="hljs-keyword">length</span> - <span class="hljs-number">2</span>) == <span class="hljs-string">'is'</span>) {
          plural = plural.<span class="hljs-keyword">substr</span>(<span class="hljs-number">0</span>, plural.<span class="hljs-keyword">length</span> - <span class="hljs-number">2</span>) + <span class="hljs-string">'es'</span>;
        } <span class="hljs-keyword">else</span> {
          plural += <span class="hljs-string">'s'</span>;
        }
        <span class="hljs-keyword">return</span> ordinal + <span class="hljs-string">' '</span> + plural;
      }
    };
  });
</code></pre><p>Of course, English has some pretty labyrinthine grammar rules, so this filter isn&#39;t 100% accurate, but in most cases it will get close enough. This filter will allow us to do things like:</p>
<pre><code>All I Need is {{<span class="hljs-number">1</span> | pluralize:'mic'}} <span class="hljs-comment">// All I need is 1 mic</span>
I've visited {{<span class="hljs-number">3</span> | pluralize:'city'}} <span class="hljs-comment">// I've visited 3 cities</span>
</code></pre><p><strong>Pitfall:</strong></p>
<p>AngularJS escapes HTML in <code>{{}}</code>. If you want to modify your string to have any HTML, such as converting hashtags in a git commit to github URLs, you can use the <a href="http://docs.angularjs.org/api/ng.directive:ngBindHtml"><code>ng-bind-html</code></a> or the <a href="http://code.angularjs.org/1.0.8/docs/api/ng.directive:ngBindHtmlUnsafe"><code>ng-bind-html-unsafe</code></a> directive, or the <a href="http://docs.angularjs.org/api/ng.$compile"><code>$compile</code></a> service. There is a minor complication: <code>ng-bind-html-unsafe</code> is available in AngularJS 1.0.x, was deprecated somewhere in 1.1.x, and removed completely in 1.2.x, so you have to roll your own <code>ng-bind-html-unsafe</code> directive (don&#39;t worry, its a simple application of design pattern 1 from the <a href="http://thecodebarbarian.com/2013/09/23/the-8020-guide-to-writing-angularjs-directives/">80/20 Guide to Directives</a>) if you&#39;re using a more recent version and <code>ng-bind-html</code> doesn&#39;t satisfy your needs.</p>
<h2 id="2-quick-hacks-for-functions-that-are-not-accessible-from-angularjs-expressions">2) Quick hacks for functions that are not accessible from AngularJS expressions</h2>
<p><em>Example: encodeURIComponent</em></p>
<p><em>Example: conditional filter for AngularJS pre-1.1.5</em></p>
<p>One strength of AngularJS that sometimes ends up being a weakness is its <a href="http://docs.angularjs.org/guide/dev_guide.services.creating_services#services-as-singletons">extremely dogmatic opposition to all global state</a>. As such, everybody who is new to AngularJS inevitably spends some time trying to figure out why the hell you can&#39;t do something like:</p>
<pre><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">ng-href</span>=<span class="hljs-value">"/product/</span></span></span><span class="hljs-expression">{{<span class="hljs-variable">product.id</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">?from=</span></span></span><span class="hljs-expression">{{<span class="hljs-variable">encodeURIComponent</span>('<span class="hljs-end-block">/products</span>')}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
  Go To Individual Product Page
<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></span>
</code></pre><p>This is because AngularJS expressions don&#39;t by default have access to the <code>window</code> object, i.e. the global scope of the page where <code>encodeURIComponent</code> lives, unless you inject <code>$window</code> into your controller and explicitly make it accessible from the controller&#39;s scope. However, doing this for every single controller is a really bad idea, so the slightly more correct way of making <code>encodeURIComponent</code> accessible from an expression is a filter:</p>
<pre><code>filter(<span class="hljs-string">'encodeUri'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(x)</span> </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURIComponent</span>(x);
  };
});
</code></pre><p>You can then access this filter using:</p>
<pre><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">ng-href</span>=<span class="hljs-value">"/product/</span></span></span><span class="hljs-expression">{{<span class="hljs-variable">product.id</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">?from=</span></span></span><span class="hljs-expression">{{'<span class="hljs-end-block">/products</span>' | <span class="hljs-variable">encodeUri</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
  Go To Individual Product Page
<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></span>
</code></pre><p><strong>Pitfall:</strong></p>
<p>AngularJS&#39; docs specify an <a href="http://docs.angularjs.org/api/ng.directive:ngIf">ngIf</a> directive, however, this directive is not available in versions before AngularJS 1.1.5, which are still in heavy use. Futhermore, AngularJS expressions don&#39;t support if statements or the <a href="http://en.wikipedia.org/wiki/%3F:">ternary operator</a>, i.e. <code>bool ? t : f</code>. So what do we do if we want to display a certain bit of text if one condition is true and another bit of text if the condition is false? We could use <code>ngShow</code>, but this seems a bit hacky.</p>
<p>The lack of conditional logic in expressions has been the bane of every AngularJS programmers&#39; existence from the very beginning. There is a pretty lively debate in the development community as to whether conditional logic belongs in templates or not. In a random aside, I stumbled across an entertaining flame war on the <a href="https://groups.google.com/forum/#!topic/golang-nuts/OEdSDgEC7js">Golang google group</a> a few weeks ago. In response, I&#39;m going to stand up on my soapbox and give my two cents:</p>
<p><em>Conditional logic is a necessary and fundamental part of any templating language. Your template should have the final say on how your data is displayed. If you have to write imperative code to tell a template whether or not a div should be displayed or what color a header should be, your templating engine sucks.</em></p>
<p>Rant aside, in AngularJS we can tie the ternary operator into two-way data-binding using a filter:</p>
<pre><code>filter(<span class="hljs-string">'conditional'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(b, t, f)</span> </span>{
    <span class="hljs-keyword">return</span> b ? t : f;
  };
});
</code></pre><p>With this filter, you can do things like this in your HTML:</p>
<pre><code><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-title">a</span> <span class="hljs-attribute">ng-href</span>=<span class="hljs-value">"</span></span></span><span class="hljs-expression">{{ <span class="hljs-variable">isProduct</span> | <span class="hljs-variable">conditional</span>:'<span class="hljs-end-block">/product</span>/':'<span class="hljs-end-block">/user</span>/'}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value"></span></span></span><span class="hljs-expression">{{<span class="hljs-variable">object.id</span>}}</span><span class="xml"><span class="hljs-tag"><span class="hljs-value">"</span>&gt;</span>
  My Object
<span class="hljs-tag">&lt;/<span class="hljs-title">a</span>&gt;</span></span>
</code></pre><h2 id="3-array-manipulation-searching-sorting-limiting">3) Array manipulation: searching, sorting, limiting</h2>
<p><em>AngularJS Example: The wonderfully-named <a href="http://docs.angularjs.org/api/ng.filter:filter"><code>filter</code> filter</a></em></p>
<p><em>AngularJS Example: The <a href="http://docs.angularjs.org/api/ng.filter:orderBy"><code>orderBy</code> filter</a></em></p>
<p><em>Our Example: Partially hardcoding the order of an array</em></p>
<p><em>Alternative Example: Merge two arrays</em></p>
<p>If you&#39;re a resident of the US and have ordered something online from a site that isn&#39;t Amazon, likely you&#39;ve experienced some minor annoyance having to scroll to the bottom of a country dropdown to find &#39;United States&#39; when entering your shipping information. Lets say that you want to streamline your checkout for US customers, and put your country select in alphabetical order except for &#39;United States&#39; being first. Obviously, there are more than a few ways of doing this, but for the sake of example, lets use a filter.</p>
<p>First off, lets assume that we have a list of countries as an array of objects with have a <code>name</code> field, and we&#39;re displaying this list as so:</p>
<pre><code><span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">"shipToCountry"</span>
        <span class="hljs-attribute">ng-options</span>=<span class="hljs-value">"country.name for country in countries"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">select</span>&gt;</span>
</code></pre><p>To order the countries alphabetically, we can use the built-in <a href="http://docs.angularjs.org/api/ng.filter:orderBy"><code>orderBy</code> filter</a>:</p>
<pre><code><span class="hljs-tag">&lt;<span class="hljs-title">select</span> <span class="hljs-attribute">ng-model</span>=<span class="hljs-value">"shipToCountry"</span>
        <span class="hljs-attribute">ng-options</span>=<span class="hljs-value">"country.name for country in countries | orderBy:'name'"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">select</span>&gt;</span>
</code></pre><p>And now, lets write a quick filter that will move the specified country to first in our array:</p>
<pre><code>filter(<span class="hljs-string">'hardcodeFirst'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(arr, field, val)</span> </span>{
    <span class="hljs-keyword">var</span> first = <span class="hljs-literal">null</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; ++i) {
      <span class="hljs-keyword">if</span> (arr[i][field] == val) {
        first = i;
        <span class="hljs-keyword">break</span>;
      }
    }

    <span class="hljs-keyword">if</span> (!first) {
      <span class="hljs-keyword">return</span> arr;
    }

    <span class="hljs-keyword">var</span> firstEl = arr[first];
    arr.splice(first, <span class="hljs-number">0</span>);
    arr.unshift(firstEl);

    <span class="hljs-keyword">return</span> arr;
  }
});
</code></pre><p>And now we can pipe the result of our <code>orderBy</code> into this filter to make sure &#39;United States&#39; comes first:</p>
<pre><code>&lt;<span class="hljs-keyword">select</span> ng-model=<span class="hljs-string">"countryToShip"</span>
        ng-options=<span class="hljs-string">"country.name for country in countries | orderBy:'</span><span class="hljs-transposed_variable">name'</span> | hardcodeFirst:<span class="hljs-string">'name'</span>:<span class="hljs-string">'United States'</span><span class="hljs-string">"&gt;
&lt;/select&gt;</span>
</code></pre><p>You can see this in action on this <a href="http://jsfiddle.net/vkarpov15/R9PJL/">JSFiddle</a>.</p>
<p><strong>Pitfall:</strong></p>
<p>You may be tempted to use the <a href="http://docs.angularjs.org/api/ng.directive:ngInit"><code>ng-init</code> directive</a> to initialize a variable within an <code>ng-repeat</code> loop where you&#39;re repeating over a filtered array. Try to avoid this temptation, or be very careful if you choose to do it anyway. If you use <code>ng-init</code>, you may force AngularJS to re-render, which will cause it to do <code>ng-init</code> again, and force an infinite re-rendering loop. This will manifest as the well-known &quot;10 $digest() iterations reached. Aborting!&quot; error, as described <a href="http://stackoverflow.com/questions/14376879/error-10-digest-iterations-reached-aborting-with-dynamic-sortby-predicate">here</a>.</p>
<h2 id="the-end">The End</h2>
<p>In my previous post you learned how to use directives. Now you&#39;ve learned about how to use filters and how to avoid pitfalls, you&#39;re one step closer to AngularJS mastery. I want to leave you with one final pitfall we should all avoid when it comes to angularJS filters: not familiarizing yourself with existing filters. AngularJS has a slew of built-in filters, so read what&#39;s already available before you go reinvent the wheel.</p>
</div><div style="color: #666666; border-top: 1px dashed #666666; margin: 25px; text-align: center; padding-top: 10px"><em>Found a typo or error? Open up a pull request! This post is
available as markdown on&nbsp;<a href="https://github.com/vkarpov15/thecodebarbarian.com/blob/master/lib/posts/20140117_angular_filters.md">Github</a></em></div><div id="disqus_thread"></div><script type="text/javascript">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = 'codebarbarian'; // required: replace example with your forum shortname

/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></div></div><div style="padding-bottom: 100px">&nbsp;</div><script type="text/javascript">!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.0.1";
  analytics.load("5DErrxzVhprg8sNh8xaiKDR6dNa7yGTI");
  analytics.page()
}}();</script><script type="text/javascript">analytics.track('opened post',
  { title: "The 80/20 Guide to Writing and Using AngularJS Filters", time: new Date() });
  </script></body></html>