<html><head><script type="text/javascript">var _sf_startpt=(new Date()).getTime()
</script><title>A NodeJS Perspective on What's New in MongoDB 2.6, Part I: Text Search | www.thecodebarbarian.com</title><meta name="viewport" content="width=device-width, initial-scale=1"/><link href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400,600" rel="stylesheet" type="text/css"/><link href="//fonts.googleapis.com/css?family=Merriweather:400,400italic,600,700" rel="stylesheet" type="text/css"/><link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet"/><link href="/style/style.css" rel="stylesheet" type="text/css"/><link href="/style/github.css" rel="stylesheet" type="text/css"/><script href="http://code.jquery.com/jquery-2.1.1.min.js" type="text/javascript"></script><script href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js" type="text/javascript"></script><script href="/javascript/sidebar.js" type="text/javascript"></script><meta property="og:title" content="A NodeJS Perspective on What's New in MongoDB 2.6, Part I: Text Search"/><meta property="og:url" content="http://www.thecodebarbarian.com/2014/04/10/a-nodejs-perspective-on-whats-new-in-mongodb-2-6-part-i-text-search"/><meta property="og:image" content="//samuellam.files.wordpress.com/2012/09/nodemongo.png"/><meta property="og:site_name" content="The Code Barbarian"/></head><body><div class="navbar social-links hidden-sm hidden-xs"><div class="container"><ul class="nav navbar-nav navbar-right"><li><a href="http://www.twitter.com/code_barbarian">twitter</a></li><li><a href="http://www.github.com/vkarpov15">github</a></li></ul></div></div><div id="nav" class="navbar"><div class="container"><div class="navbar-header"><button type="button" data-toggle="collapse" data-target="#home-nav-mobile" class="btn btn-default navbar-toggle"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button><a href="/" class="navbar-brand big-brand"><img src="/images/Barbarian_Head.png" class="logo"/><span class="site-name">The Code Barbarian  </span></a></div><div id="home-nav-mobile" class="navbar-right collapse navbar-collapse"><ul class="nav navbar-nav"><li><a href="/tag/mongodb">MongoDB</a></li><li><a href="/tag/angularjs">AngularJS</a></li><li><a href="/tag/nodejs">NodeJS</a></li><li><a href="/tag/paleo">Paleo</a></li><li class="hidden-md hidden-lg"><a href="#">@code_barbarian</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Github</a></li><li class="hidden-md hidden-lg"><a href="#">TCB Facebook</a></li></ul></div></div></div><div class="container-fluid"><div id="desktop-right-bar" class="col-lg-3 col-lg-offset-9 right-bar"><div class="right-bar-content-slider pull-right"><div class="row search-container"><div class="col-lg-12"><div class="form-group"></div><label>Search</label><form onsubmit="window.location.href = 'https://www.google.im/search?q=' + encodeURIComponent(document.getElementById('searchQ').value) + '+site:thecodebarbarian.com'; return false;"><div class="input-group"><input id="searchQ" type="text" class="form-control"/><div class="input-group-addon search-button"><i class="fa fa-search"></i></div></div></form></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">All Time Most Popular </p><ul class="list-unstyled"><li class="right-bar-li"><a href="/2013/07/22/introduction-to-the-mean-stack-part-one-setting-up-your-tools/">Introduction to the MEAN Stack, Part One: Setting Up Your Tools</a></li><li class="right-bar-li"><a href="/2013/09/23/the-8020-guide-to-writing-angularjs-directives/">The 80/20 Guide to Writing AngularJS Directives</a></li><li class="right-bar-li"><a href="/2013/07/29/introduction-to-the-mean-stack-part-two-building-and-testing-a-to-do-list/">Introduction to the MEAN Stack, Part Two: Building and Testing a To-do List</a></li><li class="right-bar-li"><a href="/2013/05/12/how-to-easily-validate-any-form-ever-using-angularjs/">How to Easily Validate Any Form Ever Using AngularJS</a></li></ul></div></div><div class="row recent-posts right-bar-group"><div class="col-lg-12"><p class="right-bar-label">Recent Posts</p><ul class="list-unstyled"><li class="right-bar-li"><a href="/2015/03/13/testing-rest-apis-with-acquit">Testing and Documenting Node.js APIs with Mocha and Acquit</a></li><li class="right-bar-li"><a href="/2015/03/06/guide-to-mongoose-plugins">An 80/20 Guide to Mongoose Plugins</a></li><li class="right-bar-li"><a href="/2015/02/27/npm-install--g">Why I (Almost) Never Use npm's -g Flag</a></li><li class="right-bar-li"><a href="/2015/02/20/better-angularjs-form-validation-with-mongoose">Better AngularJS Form Validation with Mongoose</a></li></ul></div></div></div></div></div><div id="mobile-sharing-options" class="container-fluid hidden-sm hidden-md hidden-lg"><div class="row"><div class="col-lg-12"><div class="post-sharing-options"><div class="row"><div class="col-xs-3 twitter-share sharing-option"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F2014%2F04%2F10%2Fa-nodejs-perspective-on-whats-new-in-mongodb-2-6-part-i-text-search&amp;via=code_barbarian" class="social"><i class="fa fa-twitter"></i></a></div><div class="col-xs-3 facebook-share sharing-option"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F04%2F10%2Fa-nodejs-perspective-on-whats-new-in-mongodb-2-6-part-i-text-search" class="social"><i class="fa fa-facebook"></i></a></div><div class="col-xs-3 google-share sharing-option"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F04%2F10%2Fa-nodejs-perspective-on-whats-new-in-mongodb-2-6-part-i-text-search" class="social"><i class="fa fa-google-plus"></i></a></div><div class="col-xs-3 comment sharing-option"><a href="#disqus_thread" class="social"><i class="fa fa-comment"></i></a></div></div></div></div></div></div><div id="desktop-sharing-options" class="post-sharing-options hidden-xs pull-left"><ul class="list-unstyled"><li class="twitter-share"><a href="https://twitter.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F2014%2F04%2F10%2Fa-nodejs-perspective-on-whats-new-in-mongodb-2-6-part-i-text-search&amp;via=code_barbarian" class="social"><i class="fa fa-twitter sharing-option"></i></a></li><li class="facebook-share"><a href="https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F04%2F10%2Fa-nodejs-perspective-on-whats-new-in-mongodb-2-6-part-i-text-search" class="social"><i class="fa fa-facebook sharing-option"></i></a></li><li class="google-share"><a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.thecodebarbarian.com%2F%2F2014%2F04%2F10%2Fa-nodejs-perspective-on-whats-new-in-mongodb-2-6-part-i-text-search" class="social"><i class="fa fa-google-plus sharing-option"></i></a></li></ul></div><div class="container"><div class="col-lg-9 post-text"><div class="row"><div class="title-byline-container"><h1 class="post-title">A NodeJS Perspective on What's New in MongoDB 2.6, Part I: Text Search </h1><div class="credits"><span class="byline">by Valeri Karpov</span><span class="byhandle"><a href="http://www.twitter.com/code_barbarian">@code_barbarian</a></span><span class="bydate">April 10, 2014</span></div></div></div><div class="post-body-text-container"><p>MongoDB shipped the newest stable version of its server, 2.6.0, this week. This new release is massive: there were about <a href="https://github.com/mongodb/mongo/branches">4000 commits</a> between 2.4 and 2.6. Unsurprisingly, the <a href="http://docs.mongodb.org/manual/release-notes/2.6/">release notes</a> are a pretty dense read and don&#39;t quite convey how cool some of these new features are. To remedy that, I&#39;ll dedicate a couple posts to putting on my NodeJS web developer hat and exploring interesting use cases for new features in 2.6. The first feature I&#39;ll dig in to is text search, or, in layman&#39;s terms, Google for your MongoDB documents.</p>
<p>Text search was technically in 2.4, but it was an experimental feature and not part of the query framework. Now, in 2.6, text is a full-fledged query operator, enabling you search for documents by text in <a href="http://docs.mongodb.org/manual/reference/text-search-languages/#text-search-languages">15 different languages</a>.</p>
<h2 id="getting-started-with-text-search">Getting Started With Text Search</h2>
<p>Let&#39;s dive right in and use text search on the USDA SR-25 data set described in <a href="http://thecodebarbarian.com/2014/03/28/plugging-usda-nutrition-data-into-mongodb/">this post</a>. You can download a mongorestore-friendly version of the data set here. The data set contains 8194 food items with associated nutrition data, and each food item has a human-readable description, e.g. &quot;Kale, raw&quot; or &quot;Bison, ground, grass-fed, cooked&quot;. Ideally, as a client of this data set, we shouldn&#39;t have to remember whether we need to enter &quot;Bison, grass-fed, ground, cooked&quot; or &quot;Bison, ground, grass-fed, cooked&quot; to get the data we&#39;re looking for. We should just be able to put in &quot;grass-fed bison&quot; and get reasonable results.</p>
<p>Thankfully, text search makes this simple. In order to do text search, first we need to <a href="http://docs.mongodb.org/manual/core/index-text/#create-text-index">create a text index</a> on your copy of the USDA nutrition collection. Lets create one on the food item&#39;s description:</p>
<pre><code><span class="hljs-tag">db</span><span class="hljs-class">.nutrition</span><span class="hljs-class">.ensureIndex</span>({ <span class="hljs-attribute">description </span>: <span class="hljs-string">"text"</span> });
</code></pre><p>Now, we can search the data set for our &quot;raw kale&quot; and &quot;grass-fed bison&quot;, and see what we get:</p>
<pre><code><span class="hljs-tag">db</span><span class="hljs-class">.nutrition</span><span class="hljs-class">.find</span>(
  <span class="hljs-rules">{ <span class="hljs-rule">$<span class="hljs-attribute">text </span>:<span class="hljs-value"> { $search : <span class="hljs-string">"grass-fed bison"</span> </span></span></span>} },
  <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">description </span>:<span class="hljs-value"> <span class="hljs-number">1</span> </span></span></span>}).
    <span class="hljs-tag">limit</span>(3);

<span class="hljs-tag">db</span><span class="hljs-class">.nutrition</span><span class="hljs-class">.find</span>(
  <span class="hljs-rules">{ <span class="hljs-rule">$<span class="hljs-attribute">text </span>:<span class="hljs-value"> { $search : <span class="hljs-string">"raw kale"</span> </span></span></span>} },
  <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">description </span>:<span class="hljs-value"> <span class="hljs-number">1</span> </span></span></span>}).
    <span class="hljs-tag">limit</span>(3);
</code></pre><p><a href="http://i.imgur.com/JSDNeam.png"><img src="//i.imgur.com/JSDNeam.png" style="width: 100%"></a></p>
<p>Unfortunately, the results we got aren&#39;t that useful, because they&#39;re not in order of relevance. Unless we explicitly tell MongoDB to sort by the text score, we probably won&#39;t get the most relevant documents first. Thankfully, with the help of the new <a href="http://docs.mongodb.org/master/reference/operator/projection/meta/#proj._S_meta"><code>$meta</code> keyword</a> (which is currently only useful for getting the text score), we can tell MongoDB to sort by text score <a href="http://docs.mongodb.org/master/reference/operator/query/text/#ex-sort-text-search-score">as described here</a>:</p>
<pre><code><span class="hljs-tag">db</span><span class="hljs-class">.nutrition</span><span class="hljs-class">.find</span>(
  <span class="hljs-rules">{ <span class="hljs-rule">$<span class="hljs-attribute">text </span>:<span class="hljs-value"> { $search : <span class="hljs-string">"raw kale"</span> </span></span></span>} },
  <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">description </span>:<span class="hljs-value"> <span class="hljs-number">1</span>, textScore : { $meta : <span class="hljs-string">"textScore"</span> </span></span></span>} }).
    <span class="hljs-tag">sort</span>(<span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">textScore </span>:<span class="hljs-value"> { $meta : <span class="hljs-string">"textScore"</span> </span></span></span>} }).
    <span class="hljs-tag">limit</span>(3);
</code></pre><p><a href="http://i.imgur.com/q6Xh433.png"><img src="//i.imgur.com/q6Xh433.png" style="width: 100%"></a></p>
<h2 id="using-text-search-in-nodejs">Using Text Search in NodeJS</h2>
<p>First, an important note on the compatibility of text search with NodeJS community projects: the <a href="https://github.com/mongodb/node-mongodb-native">MongoDB NodeJS driver</a> is compatible with text search going back to at least 1.3.0. However, only the latest version of <a href="https://github.com/aheckmann/mquery">mquery</a>, 0.6.0, is compatible with text search. By extension, the popular ODM <a href="https://github.com/LearnBoost/mongoose">Mongoose</a>, which relies on mquery, unfortunately doesn&#39;t have a text search compatible release at the time of this blog post. I pushed a <a href="https://github.com/LearnBoost/mongoose/commit/22602aef2af6cc0b7eddb1ac4fbe73fcd05384e5">commit to fix this</a> and the next version of Mongoose, 3.8.9, should allow you to sort by text score. In summary, to use MongoDB text search, here are the version restrictions:</p>
<ul>
<li><a href="https://github.com/mongodb/node-mongodb-native">MongoDB NodeJS driver</a>: &gt;= 1.4.0 is recommended, but it seems to work going back to at least 1.2.0 in my personal experiments.</li>
<li><a href="https://github.com/aheckmann/mquery">mquery</a>: &gt;= 0.6.0</li>
<li><a href="https://github.com/LearnBoost/mongoose">Mongoose</a>: &gt;= 3.8.9 (unfortunately not released yet as of 4/9/14)</li>
</ul>
<p>Now that you know which versions are supported, let&#39;s demonstrate how to actually do text search with the NodeJS driver. I created a simple food journal (e.g. an app that counts calories for you when you enter in how much of a certain food you&#39;ve eaten) app that is meant to tie in to the SR-25 data set. This app is available on GitHub <a href="https://github.com/vkarpov15/lean-mean-nutrition-sample">here</a>, so feel free to play with it.</p>
<p>The LeanMEAN app exposes an API endpoint, <code>GET /api/food/search/:search</code>, that runs text search on a local copy of the SR-25 data set. The implementation of this endpoint is here. For convenience, here is the actual implementation, where the <code>foodItem</code> variable is a wrapper around the Node driver&#39;s connection to the SR-25 collection.</p>
<pre><code><span class="hljs-comment">/* Because MongooseJS doesn't quite support sorting by text search score
* just yet, just use the NodeJS driver directly */</span>
exports.searchFood = function(foodItem) {
 <span class="hljs-keyword">return</span> function(req, res) {
   <span class="hljs-keyword">var</span> <span class="hljs-keyword">search</span> = req.params.<span class="hljs-keyword">search</span>;
   foodItem.connection().
     find(
       { <span class="hljs-label">$text</span> : { <span class="hljs-label">$search</span> : <span class="hljs-keyword">search</span> } },
       { <span class="hljs-keyword">score</span> : { <span class="hljs-label">$meta</span>: <span class="hljs-string">"textScore"</span> } }
     ).
     <span class="hljs-keyword">sort</span>({ <span class="hljs-keyword">score</span>: { <span class="hljs-label">$meta</span> : <span class="hljs-string">"textScore"</span> } }).
     limit(10).
     toArray(function(<span class="hljs-keyword">error</span>, foodItems) {
       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">error</span>) {
         res.json(500, { <span class="hljs-keyword">error</span> : <span class="hljs-keyword">error</span> });
       } <span class="hljs-keyword">else</span> {
         res.json(foodItems);
       }
     });
 }
};
</code></pre><p>Unsurprisingly, this code looks pretty similar to the shell version, so it shouldn&#39;t look unfamiliar to you NodeJS pros :)</p>
<h2 id="looking-forward">Looking Forward</h2>
<p>And that&#39;s all on text search for now. In the next post (scheduled for 4/25), we&#39;ll tackle some of the awesome new features in the aggregation framework, including text search in aggregation.</p>
</div><div style="color: #666666; border-top: 1px dashed #666666; margin: 25px; text-align: center; padding-top: 10px"><em>Found a typo or error? Open up a pull request! This post is
available as markdown on&nbsp;<a href="https://github.com/vkarpov15/thecodebarbarian.com/blob/master/lib/posts/20140410_text_search.md">Github</a></em></div><div id="disqus_thread"></div><script type="text/javascript">/* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
var disqus_shortname = 'codebarbarian'; // required: replace example with your forum shortname

/* * * DON'T EDIT BELOW THIS LINE * * */
(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();</script><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript><a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a></div></div><div style="padding-bottom: 100px">&nbsp;</div><script type="text/javascript">!function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error("Segment snippet included twice.");else{analytics.invoked=!0;analytics.methods=["trackSubmit","trackClick","trackLink","trackForm","pageview","identify","group","track","ready","alias","page","once","off","on"];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t){var e=document.createElement("script");e.type="text/javascript";e.async=!0;e.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.com/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)};analytics.SNIPPET_VERSION="3.0.1";
  analytics.load("5DErrxzVhprg8sNh8xaiKDR6dNa7yGTI");
  analytics.page()
}}();</script><script type="text/javascript">analytics.track('opened post',
  { title: "A NodeJS Perspective on What's New in MongoDB 2.6, Part I: Text Search", time: new Date() });
  </script></body></html>